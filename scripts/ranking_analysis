
/*
===============================================================================
Ranking Analysis
===============================================================================
Purpose:
    - To rank items (e.g., products, customers) based on performance or other metrics.
    - To identify top performers or laggards.

SQL Functions Used:
    - Window Ranking Functions: RANK(), DENSE_RANK(), ROW_NUMBER(), TOP
    - Clauses: GROUP BY, ORDER BY
===============================================================================
*/

-- Which 5 products Generating the Highest Revenue?
-- Simple Ranking

SELECT TOP 5 
	p.product_name,
	SUM(f.sales) AS total_revenue
FROM gold.fact_sales f LEFT JOIN 
	gold.dim_products p ON
	f.product_key = p.product_key
GROUP BY p.product_name
ORDER BY total_revenue DESC;

--Using Rank --
SELECT * FROM(
SELECT 	p.product_name,
	SUM(f.sales) AS total_revenue,
	RANK() OVER(ORDER BY SUM(f.sales) DESC) AS product_rank
FROM gold.fact_sales f LEFT JOIN 
	gold.dim_products p ON
	f.product_key = p.product_key
GROUP BY p.product_name
) AS Ranked_products
WHERE product_rank <=5;

-- Find the top 10 customers who have generated the highest revenue
SELECT TOP 10
    c.customer_key,
    c.first_name,
    c.last_name,
    SUM(f.sales) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
    ON c.customer_key = f.customer_key
GROUP BY 
    c.customer_key,
    c.first_name,
    c.last_name
ORDER BY total_revenue DESC;

-- The 3 customers with the fewest orders placed
SELECT TOP 3
    c.customer_key,
    c.first_name,
    c.last_name,
    COUNT(DISTINCT order_number) AS total_orders
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
    ON c.customer_key = f.customer_key
GROUP BY 
    c.customer_key,
    c.first_name,
    c.last_name
ORDER BY total_orders;
